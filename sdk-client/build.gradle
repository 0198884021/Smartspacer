plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    namespace 'com.kieronquinn.app.smartspacer.sdk.client'
    compileSdk 34

    defaultConfig {
        minSdk 29
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildFeatures {
        viewBinding true
        aidl true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

def pomDependencies = [
    new Dependency('com.kieronquinn.app.smartspacer', 'sdk-core', '0.0.1p', false),
    new Dependency('androidx.core', 'core-ktx', '1.10.1'),
    new Dependency('androidx.fragment', 'fragment', '1.6.0'),
    new Dependency('androidx.constraintlayout', 'constraintlayout', '2.1.4'),
    new Dependency('androidx.lifecycle', 'lifecycle-service', '2.6.1'),
    new Dependency('androidx.lifecycle', 'lifecycle-runtime-ktx', '2.6.1'),
    new Dependency('org.jetbrains.kotlinx', 'kotlinx-coroutines-core', '1.7.1'),
    new Dependency('com.github.skydoves', 'balloon', '1.4.7')
]

dependencies {
    pomDependencies.forEach {
        if(it.includeInGradle) {
            implementation(it.toGradleNotation())
        }
    }
    api project(path: ':sdk-core')
}

project.afterEvaluate {
    publishing {
        publications {
            library(MavenPublication) {
                setGroupId "com.kieronquinn.app.smartspacer"
                setArtifactId "sdk-client"
                version "0.0.5l"

                artifact bundleDebugAar

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    pomDependencies.forEach {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.groupId)
                        dependencyNode.appendNode('artifactId', it.artifactId)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

class Dependency {

    String groupId, artifactId, version
    boolean includeInGradle

    Dependency(String groupId, String artifactId, String version){
        this(groupId, artifactId, version, true)
    }

    Dependency(String groupId, String artifactId, String version, boolean includeInGradle){
        this.groupId = groupId
        this.artifactId = artifactId
        this.version = version
        this.includeInGradle = includeInGradle
    }

    String toGradleNotation(){
        return "${groupId}:${artifactId}:${version}"
    }

}